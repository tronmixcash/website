{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@ethersproject/bytes\"","webpack:///external \"injectpromise\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@ethersproject/bignumber\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@ethersproject/keccak256\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@ethersproject/properties\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"axios\"","webpack:///external \"@ethersproject/strings\"","webpack:///external \"@ethersproject/logger\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/typedData.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/lib/sidechain.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","toUtf8String","recoverAddress","SigningKey","AbiCoder","Interface","FormatTypes","arrayify","splitSignature","joinSignature","logger","Logger","getTronAddress","address","TronWeb","toHex","id","text","padding","Uint8Array","fill","NegativeOne","BigNumber","from","Zero","One","MaxUint256","hexTrue","hexZeroPad","toHexString","hexFalse","domainFieldTypes","version","chainId","verifyingContract","salt","domainFieldNames","checkString","throwArgumentError","domainChecks","error","toLowerCase","hexlify","getBaseEncoder","type","signed","width","boundsUpper","mask","boundsLower","add","mul","lt","gt","toTwos","padOffset","hexConcat","hexPadRight","encodeType","fields","TypedDataEncoder","types","defineReadOnly","freeze","deepCopy","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","primaryTypes","filter","checkCircular","found","child","subtype","primaryType","sort","_types","encoder","_encoderCache","_getEncoder","subEncoder","getEncoder","result","encodedType","values","unshift","encodeData","hashStruct","callback","_visit","reduce","accum","domain","domainFields","a","b","EIP712Domain","hashDomain","hash","domainValues","domainTypes","typesWithDomain","shallowCopy","message","visit","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","btoa","signBytes","privateKey","contents","_signTypedData","signingKey","messageDigest","signDigest","substring","Number","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","com_priKeyBytes","com_addressBytes","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","_addressToHex","target","_array","newTarget","_isBigNumber","decodeParams","names","ignoreMethodHash","obj","arg","index","substr","encodeParams","extractSize","size","extractArrayDim","encodeParamsV2ByABI","funABI","args","buildFullTypeDefinition","typeDef","components","innerTypes","innerType","convertAddresses","addrArr","addrs","mapTuple","dimension","encodeArgs","inputs","convertTypes","decodeParamsV2ByABI","data","decodeResult","buildFullTypeNameDefinition","outputs","outputTypes","convertTypeNames","decodeResCopy","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","constructor","isString","isFunction","isHex","isInteger","hasProperty","hasProperties","properties","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","abi","padLeft","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","_TypedDataEncoder","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","params","self","Validator","tronWeb","param","msg","Function","normalized","no","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","stateMutability","rawParameter","funcABIV2","parametersV2","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","shieldedParameter","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","verifyTypedData","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","signedHexTransaction","sendHexTransaction","hexTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","recovered","tronAddress","base58Address","fromHex","decodeOutput","Method","iface","getEvent","format","sighash","getFunction","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","_call","send","_send","watch","_watch","deployed","constant_result","msg2","chunk","broadcast","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","libs","plugged","skipped","plugin","semver","satisfies","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","only_confirmed","only_unconfirmed","querystring","response","getEventsByTransactionID","SideChain","sideOptions","mainchain","fullHost","mainGatewayAddress","sideGatewayAddress","sideChainId","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","eventHeaders","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","setFullNodeHeader","setEventHeader","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@ethersproject/bytes\");","module.exports = require(\"injectpromise\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@ethersproject/bignumber\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@ethersproject/keccak256\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@ethersproject/properties\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"axios\");","module.exports = require(\"@ethersproject/strings\");","module.exports = require(\"@ethersproject/logger\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str, strict = false) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { utils } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\nconst Interface = utils.Interface;\nconst FormatTypes = utils.FormatTypes;\nconst arrayify = utils.arrayify;\nconst splitSignature = utils.splitSignature;\nconst joinSignature = utils.joinSignature;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n    Interface,\n    FormatTypes,\n    splitSignature,\n    joinSignature,\n    arrayify\n};\n","import {  ADDRESS_PREFIX_REGEX } from './address';\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport TronWeb from 'index';\nconst version = \"tronweb/hash/5.4.0\";\nconst logger = new Logger(version);\nfunction getAddress(address) {\n    return TronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x');\n};\nfunction getTronAddress(address) {\n    return TronWeb.address.toHex(address);\n};\nfunction id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getTronAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"trcToken\": return getBaseEncoder('uint256');\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"trcToken\":\n                        return BigNumber.from(value).toString();\n                    case \"address\":\n                        return getTronAddress(value).toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256, SigningKey} from './ethersUtils';\nimport {TypedDataEncoder} from './typedData';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function _signTypedData(domain, types, value, privateKey) {\n    const key = {\n        toHexString: function () {\n            return '0x' + privateKey;\n        },\n        value: privateKey,\n    };\n    const signingKey = new SigningKey(key);\n\n    const messageDigest = TypedDataEncoder.hash(domain, types, value);\n    const signature = signingKey.signDigest(messageDigest);\n    const signatureHex = [\n        '0x',\n        signature.r.substring(2),\n        signature.s.substring(2),\n        Number(signature.v).toString(16),\n    ].join('');\n    return signatureHex;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nfunction _isArray(_array) {\n    return Array.isArray(_array);\n}\n\nfunction _addressToHex(value) {\n    return TronWeb.address.toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\n\nfunction deepCopy(target) {\n    if (\n        Object.prototype.toString.call(target) !== '[object Object]' &&\n        Object.prototype.toString.call(target) !== '[object Array]'\n    ) {\n        return target;\n    }\n    const newTarget = _isArray(target) ? [] : {};\n\n    Object.keys(target).forEach(key =>\n        newTarget[key] = target[key] instanceof Object && !target[key]._isBigNumber ? deepCopy(target[key]) : target[key]\n    );\n\n    return newTarget;\n}\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\nfunction extractSize (type) {\n  const size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n  return size ? size[2] : '';\n}\n\nfunction extractArrayDim (type) {\n  const size = extractSize(type)\n  return (size.match(/\\]\\[/g) || []).length + 1;\n}\n\nexport function encodeParamsV2ByABI(funABI, args) {\n    const types = [];\n\n    const buildFullTypeDefinition = (typeDef) => {\n      if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n        const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeDefinition(innerType) });\n        return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}`;\n      }\n\n      if (/trcToken/.test(typeDef.type))\n        return typeDef.type.replace(/trcToken/, 'uint256');\n\n      return typeDef.type;\n    }\n\n    const convertTypes = (types) => {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (/trcToken/.test(type))\n          types[i] = type.replace(/trcToken/, 'uint256');\n      }\n    }\n\n    const convertAddresses = addrArr => {\n      if (Array.isArray(addrArr)) {\n        addrArr.forEach((addrs, i) => {\n          addrArr[i] = convertAddresses(addrs);\n        });\n        return addrArr;\n      } else {\n        return _addressToHex(addrArr)\n      }\n    };\n\n    const mapTuple = (components, args, dimension) => {\n      if (dimension > 1) {\n        if (args.length) {\n          args.forEach(arg => {\n            mapTuple(components, arg, dimension - 1);\n          });\n        }\n      } else {\n        if (args.length && dimension) {\n          args.forEach(arg => {\n            encodeArgs(components, arg);\n          });\n        }\n      }\n    };\n\n    const encodeArgs = (inputs = [], args) => {\n      if (inputs.length)\n        inputs.forEach((input, i) => {\n          const type = input.type;\n\n          if (args[i])\n            if (type === 'address') args[i] = _addressToHex(args[i]);\n            else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n              convertAddresses(args[i])\n            else if (type.indexOf('tuple') === 0)\n              if (extractSize(type)) {\n                const dimension = extractArrayDim(type);\n                mapTuple(input.components, args[i], dimension);\n              } else encodeArgs(input.components, args[i]);\n        });\n    };\n\n    if (funABI.inputs && funABI.inputs.length) {\n      for (let i = 0; i < funABI.inputs.length; i++) {\n        const type = funABI.inputs[i].type;\n        // \"false\" will be converting to `false` and \"true\" will be working\n        // fine as abiCoder assume anything in quotes as `true`\n        if (type === 'bool' && args[i] === 'false') {\n          args[i] = false;\n        }\n        types.push(type.indexOf('tuple') === 0 ? buildFullTypeDefinition(funABI.inputs[i]) : type);\n        if (args.length < types.length) {\n          args.push('');\n        }\n      }\n    }\n\n    encodeArgs(funABI.inputs, args);\n    convertTypes(types);\n\n    return abiCoder.encode(types, args);\n}\n\nexport function decodeParamsV2ByABI(funABI, data) {\n  const convertTypeNames = (types) => {\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i]\n      if (/^trcToken/.test(type))\n        types[i] = type.replace(/^trcToken/, 'uint256')\n    }\n  }\n\n  const convertAddresses = addrArr => {\n    if (Array.isArray(addrArr)) {\n      addrArr.forEach((addrs, i) => {\n        addrArr[i] = convertAddresses(addrs);\n      });\n      return addrArr;\n    } else {\n      return TronWeb.address.toHex(addrArr)\n    }\n  };\n\n  const mapTuple = (components, args, dimension) => {\n    if (dimension > 1) {\n      if (args.length) {\n        args.forEach(arg => {\n          mapTuple(components, arg, dimension - 1);\n        });\n      }\n    } else {\n      if (args.length && dimension) {\n        args.forEach(arg => {\n          decodeResult(components, arg);\n        });\n      }\n    }\n  };\n\n  const buildFullTypeNameDefinition = (typeDef) => {\n    const name = typeDef.name ? ` ${typeDef.name}` : '';\n    if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n      const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeNameDefinition(innerType) });\n      return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}${name}`;\n    }\n    if (/trcToken/.test(typeDef.type))\n      return typeDef.type.replace(/trcToken/, 'uint256') + name;\n\n    return typeDef.type + name;\n  }\n\n  const decodeResult = (outputs = [], result) => {\n    if (outputs.length)\n      outputs.forEach((output, i) => {\n        const {type, name} = output;\n\n        if (result[i])\n          if (type === 'address') {\n            result[i] = TronWeb.address.toHex(result[i]);\n            if(name) result[name] = TronWeb.address.toHex(result[name]);\n          }\n          else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[') {\n            convertAddresses(result[i])\n            if(name) convertAddresses(result[name])\n          }\n          else if (type.indexOf('tuple') === 0) {\n            if (extractSize(type)) {\n              const dimension = extractArrayDim(type);\n              mapTuple(output.components, result[i], dimension);\n            } else decodeResult(output.components, result[i]);\n\n            if(name) result[name] = result[i];\n          }\n      });\n  };\n\n  // Only decode if there supposed to be fields\n  if (funABI.outputs && funABI.outputs.length > 0) {\n\n      let outputTypes = [];\n      for (let i = 0; i < funABI.outputs.length; i++) {\n        const type = funABI.outputs[i].type;\n        const name = funABI.outputs[i].name ? ` ${funABI.outputs[i].name}` : '';\n        outputTypes.push(type.indexOf('tuple') === 0 ? buildFullTypeNameDefinition(funABI.outputs[i]) : type + name);\n      }\n      convertTypeNames(outputTypes);\n\n      if (!data || !data.length) data = new Uint8Array(32 * funABI.outputs.length); // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data\n      // decode data\n      const decodeRes = abiCoder.decode(outputTypes, data);\n      const decodeResCopy = deepCopy(decodeRes);\n      decodeResult(funABI.outputs, decodeResCopy);\n\n      return decodeResCopy\n  }\n  return [];\n}","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\nimport {TypedDataEncoder as _TypedDataEncoder} from './typedData'\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    _TypedDataEncoder,\n    ethersUtils\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\nimport {encodeParamsV2ByABI} from 'utils/abi';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type === 'constructor' && 'payable' === func.stateMutability.toLowerCase();\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        if (options.rawParameter && utils.isString(options.rawParameter)) {\n            parameters = options.rawParameter.replace(/^(0x)/, '');\n        } else if (options.funcABIV2) {\n            parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n        } else {\n            var constructorParams = abi.find(\n                (it) => {\n                    return it.type === 'constructor';\n                }\n            );\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n        }\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            // work for abiv2 if passed the function abi in options\n            if (options.funcABIV2) {\n                parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n            }\n\n            if (options.shieldedParameter && utils.isString(options.shieldedParameter)) {\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && utils.isString(options.rawParameter)) {\n                parameters = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n        args.call_value = parseInt(callValue)\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        if (!options._isConstant) {\n            args.fee_limit = parseInt(feeLimit)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    verifyTypedData(domain, types, value, signature, address = this.tronWeb.defaultAddress.base58, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyTypedData, domain, types, value, signature, address);\n\n        if (Trx.verifyTypedData(domain, types, value, signature, address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifyTypedData(domain, types, value, signature, address) {\n        signature = signature.replace(/^0x/, '');\n\n        const messageDigest = utils._TypedDataEncoder.hash(domain, types, value);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128),\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    _signTypedData(domain, types, value, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._signTypedData, domain, types, value, privateKey);\n\n        try {\n            const signatureHex = Trx._signTypedData(domain, types, value, privateKey);\n            return callback(null, signatureHex);\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static _signTypedData(domain, types, value, privateKey) {\n        return utils.crypto._signTypedData(domain, types, value, privateKey);\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendHexTransaction(signedHexTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendHexTransaction, signedHexTransaction, options);\n\n        if (!utils.isHex(signedHexTransaction))\n            return callback('Invalid hex transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        const params = {\n            transaction: signedHexTransaction\n        }\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasthex',\n             params,\n            'post'\n        ).then(result => {\n            if (result.result) {\n                result.transaction = JSON.parse(result.transaction)\n                result.hexTransaction = signedHexTransaction;\n            }\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    broadcastHex(...args) {\n        return this.sendHexTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport {encodeParamsV2ByABI, decodeParamsV2ByABI} from 'utils/abi';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable';\n    abi.type = abi.type ? abi.type.toLowerCase() : '';\n    if(abi.type === 'fallback' || abi.type === 'receive') return '0x';\n    let iface = new utils.ethersUtils.Interface([abi]);\n    if(abi.type === 'event') {\n      return iface.getEvent(abi.name).format(utils.ethersUtils.FormatTypes.sighash);\n    }\n    return iface.getFunction(abi.name).format(utils.ethersUtils.FormatTypes.sighash)\n}\n\nconst decodeOutput = (abi, output) => {\n    return decodeParamsV2ByABI(abi, output)\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n      let rawParameter = '';\n      if(this.abi && !/event/i.test(this.abi.type)) {\n          rawParameter = encodeParamsV2ByABI(this.abi, args);\n      }\n      return {\n          call: (options = {}, callback = false) => {\n              if (utils.isFunction(options)) {\n                  callback = options;\n                  options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._call([], [], options, callback);\n          },\n          send: (options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) => {\n              if (utils.isFunction(privateKey)) {\n                  callback = privateKey;\n                  privateKey = this.tronWeb.defaultPrivateKey;\n              }\n              if (utils.isFunction(options)) {\n                callback = options;\n                options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._send([], [], options, privateKey, callback);\n          },\n          watch: (...methodArgs) => this._watch(...methodArgs)\n      }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.abi, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1 && Object.keys(output).length === 1) {\n                        output = output[0];\n                    }\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.abi, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1 && Object.keys(decoded).length === 1) {\n                    decoded = decoded[0];\n                }\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.only_confirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.only_unconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\n\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey, strict = false) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey, strict);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}